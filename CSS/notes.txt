CSS
---
 -Cascading style Sheet
 -It is used to style HTML pages.like changing position,color etc.
 
In three ways we can apply CSS 
 1)Inline Styling
     -An inline style may be used to apply a unique style for a single element.
	 -we use style attribute to apply this.
	eg:- <!DOCTYPE html>
<html>
<body>

<h1 style="color: aquamarine; text-align:center;">This is a heading</h1>
<p style="color: cornflowerblue; ">This is a paragraph.</p>

</body>
</html>

 2)Internal CSS
       -An internal style sheet may be used if one single HTML page has a unique style.

       -The internal style is defined inside the <style> element, inside the head section.
	   
	   eg:-
	   <!DOCTYPE html>
<html>
    <head>
        <style>
             h1{
                 color: blue;
             }

             p{
                font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;
                color: blueviolet;
             }
        </style>
    </head>
<body>

<h1 >This is a heading</h1>
<p >This is a paragraph.</p>

</body>
</html>

3)External CSS
    -With an external style sheet, you can change the look of an entire website by changing just one file!

    -Each HTML page must include a reference to the external style sheet file inside the <link> element, inside the head section.
eg:- 
>> first.html
      <!DOCTYPE html>
<html>
    <head>
        <link rel="stylesheet" href="style.css"/>
    </head>
<body>

<h1 >This is a heading</h1>
<p >This is a paragraph.</p>

</body>
</html>

>>style.css
   h1{
    color:chartreuse;
}

p{
    font-size: medium;
}


POSITION
--------
  - It allows us to set the position of an HTML element.
  -It has 4 types
    1. Static Positioning
	2.Absolute Positioning
	3.Relative Positioning
	4.Fixed Positioning
	
	NOTE
	----
	 bY Default all elements have static position.
	 
	
1)Static Positioning
     -It just takes whatever the position specified in the html document and put it on the webpage.
	 eg:
	  <div style="position: static;
		border: 3px solid #73AD21;">This is a heading</div>
		
2)Absolute Positioning
    -An element with position: absolute; is positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport, like fixed).

    However; if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling.

Note: Absolute positioned elements are removed from the normal flow, and can overlap elements.

eg:
<!DOCTYPE html>
<html>
<head>
<style>
div.relative {
  position: relative;
  width: 400px;
  height: 200px;
  border: 3px solid #73AD21;
} 

div.absolute {
  position: absolute;
  top: 40px;
  right: 0;
  width: 200px;
  height: 100px;
  border: 3px solid #73AD21;
}
</style>
</head>
<body>

<h2>position: absolute;</h2>

<p>An element with position: absolute; is positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport, like fixed):</p>

<div class="relative">This div element has position: relative;
  <div class="absolute">This div element has position: absolute;</div>
</div>

</body>
</html>


3)Relative Positioning
     
   -An element with position: relative; is positioned relative to its normal position.

   -Setting the top, right, bottom, and left properties of a relatively-positioned element will cause it to be adjusted away from its normal position. Other content 
will not be adjusted to fit into any gap left by the element.
eg:<!DOCTYPE html>
<html>
<head>
<style>
div.relative {
  position: relative;
  left: 30px;
  border: 3px solid #73AD21;
}
</style>
</head>
<body>

<h2>position: relative;</h2>

<p>An element with position: relative; is positioned relative to its normal position:</p>

<div class="relative">
This div element has position: relative;
</div>

</body>
</html>

4)Fixed Positioning
An element with position: fixed; is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. The top, right, bottom, and left properties are used to position the element.

A fixed element does not leave a gap in the page where it would normally have been located.

Notice the fixed element in the lower-right corner of the page. Here is the CSS that is used:

eg:
<!DOCTYPE html>
<html>
<head>
<style>
div.fixed {
  position: fixed;
  bottom: 0;
  right: 0;
  width: 300px;
  border: 3px solid #73AD21;
}
</style>
</head>
<body>

<h2>position: fixed;</h2>

<p>An element with position: fixed; is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled:</p>

<div class="fixed">
This div element has position: fixed;
</div>

</body>
</html>




ANIMATION
---------
eg:
<!DOCTYPE html>
<html>
<head>
<style>

div {
        width: 100px;
        height: 100px;
        background-color: red;
        animation-name: example;
        animation-duration: 5s;
        margin:30px
      }

@keyframes example{
    from {background-color: burlywood;}
    to {background-color: rgb(17, 178, 68);}
}

</style>
</head>
<body>
<div></div>
   
      

      
